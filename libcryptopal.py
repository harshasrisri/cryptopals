"""
Python source file containing helper functions for the cryptopals exercise
"""
import sys
import string
import binascii

def xorstr (key, msg):
    """
    This function takes a multi-byte key and a multi-byte message. 
    It returns a string that is obtained by XORing each byte of the
    message with each byte of the key which keeps rotating.
    """
    # join a list of chars into string where list is generated by 
    # XORing each of msg bytes with each of the key bytes rotating.
    return ''.join([chr(ord(msg[i]) ^ ord(key[i % len(key)])) for i in range (0, len(msg))])

def guess_keychar (msg):
    """
    This function takes an XOR-encrypted string as argument and tries to guess which 
    among the printable characters could be used as a key to XOR a plaintext string. 
    """
    maxkey = maxval = 0
    for key in string.printable:
        value = string_rank (xorstr (key, msg))
        if value > maxval:
            maxval = value
            maxkey = key
    return (maxkey,maxval)

def string_rank (text):
    """
    This function returns a rank to a string depending on occurrance frequencies 
    of each of the characters in it.
    """
    freq_set = { 
            ' ':13.00, 'e':12.70, 't':9.056, 'a':8.167, 'o':7.507, 'i':6.966, 'n':6.749, 
            's':6.327, 'h':6.094, 'r':5.987, 'd':4.253, 'l':4.025, 'u':2.758, 'b':1.492, 
            'c':2.782, 'f':2.228, 'g':2.015, 'j':0.153, 'k':0.772, 'm':2.406, 'p':1.929, 
            'q':0.095, 'v':0.978, 'w':2.360, 'x':0.150, 'y':1.974, 'z':0.074 }
    return sum([freq_set[letter] for letter in text if letter in freq_set])

def edit_distance (str1, str2):
    """
    This function calculates the binary Hamming distance of 2 strings by converting 
    them to ascii-decoded binary strings. For example, the distance between:
            this is a test
    and 
            wokka wokka!!!
    is 37. Note that the length of the strings should be equal
    """
    if len(str1.strip()) != len(str2.strip()):
        raise ValueError("Strings have to be of equal lengths: " + str1 + " and " + str2)

    return sum(bit=='1' for bit in bin(int(binascii.hexlify(xorstr(str1, str2)), 16)))
